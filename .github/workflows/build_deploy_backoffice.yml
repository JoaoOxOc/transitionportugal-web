# This is a basic workflow to help you get started with Actions

name: transition pt backoffice Build and Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ deployfront ]


env:
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REPOSITORY: joaooxoc/transitionportugal-web
  REGISTRY_HOSTNAME: registry.digitalocean.com/photosapi
  IMAGE_NAME: tp_backoffice
  DEPLOYMENT_NAME: transportugal-backoffice
  DO_CLUSTER: k8s-photos
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  BACKOFFICE_DEPLOYMENT_FILE_NAME: backoffice_kubernetes.yml
  BACKOFFICE_PRIVATE_SECRET: ${{secrets.BACKOFFICE_AUTH_PRIVATE_KEY}}

jobs:
  build:
    name: Build docker images and deploy to DO kubernetes
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Install doctl
      uses: digitalocean/action-doctl@v2.1.0
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 6000
      
    - name: Build backoffice container image
      run: docker build -t "$REGISTRY_HOSTNAME/$IMAGE_NAME" -f $GITHUB_WORKSPACE/frontends/backoffice.dockerfile ./frontends/ --build-arg=NEXT_PUBLIC_API_BASE_URL=${{secrets.API_BASE_URL}} --build-arg=NEXT_PUBLIC_AUTH_URL=${{secrets.BACKOFFICE_AUTH_URL}} --build-arg=AUTH_API_URL=${{secrets.API_AUTH_URL}} --build-arg=NEXTAUTH_SECRET="${{secrets.BACKOFFICE_AUTH_PRIVATE_KEY}}" --build-arg=NEXTAUTH_URL=${{secrets.BACKOFFICE_AUTH_URL}} --build-arg=AUTH_API_CLIENT_ID=${{secrets.BACKOFFICE_AUTH_CLIENT_ID}} --build-arg=AUTH_API_CLIENT_SECRET="${{secrets.BACKOFFICE_AUTH_CLIENT_SECRET}}" --build-arg=NEXT_PUBLIC_CLIENT_ID=${{secrets.BACKOFFICE_CLIENT_ID}} --build-arg=NEXT_PUBLIC_CLIENT_SECRET=${{secrets.BACKOFFICE_CLIENT_SECRET}} --build-arg=NEXT_PUBLIC_HOME_URL=${{secrets.API_FRONTEND_BASE_URL}}
    
    - name: Push backoffice image to DigitalOcean Container Registry
      run: docker push "$REGISTRY_HOSTNAME/$IMAGE_NAME":latest
      
    
    - name: authenticate to DO
      run: doctl auth init

    - name: Save DigitalOcean kubeconfig
      run: doctl -t $DIGITALOCEAN_ACCESS_TOKEN k8s cluster config save $DO_CLUSTER

    - name: Update deployment file with gateway image registry name
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i "s|<BACKOFFICE_IMAGE>|$REGISTRY_HOSTNAME/$IMAGE_NAME:latest|" $GITHUB_WORKSPACE/$BACKOFFICE_DEPLOYMENT_FILE_NAME
      
      
    #- name: replace backoffice private key
    #  run: sed -i "s|<REPLACE_PRIVATE_KEY>|$BACKOFFICE_PRIVATE_SECRET|" $GITHUB_WORKSPACE/backoffice_private_key_store
      
    #- name: create backoffice private key secret
    #  run: kubectl create secret generic backoffice-private-key-secret --from-file=backoffice-privatekey=$GITHUB_WORKSPACE/backoffice_private_key_store
      
      
    - name: process backoffice environment variables
      run: kubectl delete secret transbackoffice-data --ignore-not-found && kubectl create secret generic transbackoffice-data --from-literal=api-base-url=${{secrets.API_BASE_URL}} --from-literal=backoffice-auth-url=${{secrets.BACKOFFICE_AUTH_URL}} --from-literal=backoffice-auth-api-url=${{secrets.API_AUTH_URL}} --from-literal=next-auth-url=${{secrets.BACKOFFICE_AUTH_URL}} --from-literal=backoffice-auth-client-id=${{secrets.BACKOFFICE_AUTH_CLIENT_ID}} --from-literal=backoffice-auth-client-secret=${{secrets.BACKOFFICE_AUTH_CLIENT_SECRET}} --from-literal=auth-client-id=${{secrets.BACKOFFICE_CLIENT_ID}} --from-literal=auth-client-secret=${{secrets.BACKOFFICE_CLIENT_SECRET}} --from-literal=home-base-url=${{secrets.API_FRONTEND_BASE_URL}}
    

    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f $GITHUB_WORKSPACE/$BACKOFFICE_DEPLOYMENT_FILE_NAME

    - name: Verify deployment
      run: kubectl rollout status deployment/$DEPLOYMENT_NAME
